// Fun√ß√µes auxiliares para identificar secretarias espec√≠ficas
function isSaude(secretaria) {
    if (!secretaria) return false;
    // Pode ser por nome, tipo ou id (ajuste conforme sua base)
    return (secretaria.nome && secretaria.nome.toLowerCase().includes('sa√∫de')) || (secretaria.tipo === 'saude');
}

function isEducacao(secretaria) {
    if (!secretaria) return false;
    return (secretaria.nome && secretaria.nome.toLowerCase().includes('educa√ß√£o')) || (secretaria.tipo === 'educacao');
}

// Fluxo detalhado para Sa√∫de (exemplo inicial)
async function fluxoSaude(atendimento, mensagemCidadao) {
    // Aqui voc√™ pode ramificar por etapas espec√≠ficas da sa√∫de
    // Exemplo: perguntar PSF, especialidade, anexos, etc.
    // Use atendimento.chatbot_state para controlar etapas
    // Retorne resposta, opcoes e proximoEstado conforme necess√°rio
    return {
        resposta: 'Voc√™ est√° falando com a Secretaria de Sa√∫de! Por favor, informe seu PSF de refer√™ncia:',
        opcoes: [
            { id: 'psf_centro', nome: 'PSF Centro', emoji: 'üè¢' },
            { id: 'psf_zona_rural', nome: 'PSF Zona Rural', emoji: 'üåæ' },
            { id: 'psf_novo_bairro', nome: 'PSF Novo Bairro', emoji: 'üèòÔ∏è' }
        ],
        proximoEstado: 'SAUDE_PSF'
    };
}

// Fluxo detalhado para Educa√ß√£o (exemplo inicial)
async function fluxoEducacao(atendimento, mensagemCidadao) {
    return {
        resposta: 'Voc√™ est√° falando com a Secretaria de Educa√ß√£o! Qual servi√ßo deseja?',
        opcoes: [
            { id: 'matricula', nome: 'Solicitar Matr√≠cula Escolar', emoji: 'üìù' },
            { id: 'historico', nome: 'Emitir Hist√≥rico Escolar', emoji: 'üìÑ' },
            { id: 'info_escola', nome: 'Informa√ß√µes sobre Escolas', emoji: 'üè´' }
        ],
        proximoEstado: 'EDUCACAO_SERVICO'
    };
}
// gci-backend/src/services/chatbotRouterService.js

import atendimentoService from './atendimentoService.js';
import secretariaService from './secretariaService.js';
import servicoService from './servicoService.js';
import logger from '../utils/logger.js';

/**
 * Roteador de fluxo conversacional do chatbot.
 * Decide a pr√≥xima mensagem e etapa com base no estado atual do atendimento.
 */
const ESTADOS = {
    INICIAL: 'BOT_INICIAL',
    AGUARDANDO_SECRETARIA: 'AGUARDANDO_SECRETARIA',
    AGUARDANDO_SERVICO: 'AGUARDANDO_SERVICO',
    AGUARDANDO_DESCRICAO: 'AGUARDANDO_DESCRICAO',
    FINALIZADO: 'FINALIZADO',
    // Adicione outros estados conforme necess√°rio
};

async function proximoPasso(atendimento, mensagemCidadao) {
    // Exemplo de roteamento simples
    switch (atendimento.chatbot_state) {
        case ESTADOS.INICIAL: {
            // Retornar sauda√ß√£o e op√ß√µes de secretarias
            const secretarias = await secretariaService.listarAtivasPorMunicipio(atendimento.municipio_id);
            return {
                resposta: 'üëã Ol√°! Para qual secretaria voc√™ deseja atendimento?',
                opcoes: secretarias.map(s => ({ id: s.id, nome: s.nome, emoji: s.emoji })),
                proximoEstado: ESTADOS.AGUARDANDO_SECRETARIA
            };
        }
        case ESTADOS.AGUARDANDO_SECRETARIA: {
            // Buscar dados da secretaria selecionada
            const secretaria = await secretariaService.findById(mensagemCidadao.secretaria_id, { role: 'bot' });
            if (isSaude(secretaria)) {
                return await fluxoSaude(atendimento, mensagemCidadao);
            }
            if (isEducacao(secretaria)) {
                return await fluxoEducacao(atendimento, mensagemCidadao);
            }
            // Fluxo padr√£o para demais secretarias
            const servicos = await servicoService.listarAtivosPorSecretaria(mensagemCidadao.secretaria_id);
            return {
                resposta: `√ìtimo! Qual servi√ßo voc√™ precisa na secretaria?`,
                opcoes: servicos.map(s => ({ id: s.id, nome: s.nome, emoji: s.emoji })),
                proximoEstado: ESTADOS.AGUARDANDO_SERVICO
            };
        }
        // Aqui voc√™ pode adicionar cases espec√≠ficos para etapas detalhadas de Sa√∫de/Educa√ß√£o
        case 'SAUDE_PSF': {
            // Ap√≥s PSF, perguntar especialidade
            return {
                resposta: 'Qual especialidade m√©dica voc√™ precisa?',
                opcoes: [
                    { id: 'clinico', nome: 'Cl√≠nico Geral', emoji: 'üë©‚Äç‚öïÔ∏è' },
                    { id: 'gineco', nome: 'Ginecologista', emoji: 'ü§∞' },
                    { id: 'pediatra', nome: 'Pediatra', emoji: 'üë∂' },
                    { id: 'dermato', nome: 'Dermatologista', emoji: 'ü©∫' }
                ],
                proximoEstado: 'SAUDE_ESPECIALIDADE'
            };
        }
        case 'SAUDE_ESPECIALIDADE': {
            // Perguntar dia/hor√°rio preferido
            return {
                resposta: 'Qual o melhor dia e hor√°rio para seu atendimento?',
                proximoEstado: 'SAUDE_HORARIO'
            };
        }
        case 'SAUDE_HORARIO': {
            // Perguntar sobre anexo
            return {
                resposta: 'Deseja anexar um pedido m√©dico ou documento? (Envie agora ou digite "n√£o")',
                proximoEstado: 'SAUDE_ANEXO'
            };
        }
        case 'SAUDE_ANEXO': {
            // Ap√≥s anexo, pedir e-mail
            return {
                resposta: 'Para finalizar, informe seu e-mail para receber o protocolo:',
                proximoEstado: 'SAUDE_EMAIL'
            };
        }
        case 'SAUDE_EMAIL': {
            // Finalizar atendimento sa√∫de
            return {
                resposta: 'Atendimento de sa√∫de registrado! Em breve voc√™ receber√° a confirma√ß√£o por e-mail. ‚úÖ',
                proximoEstado: ESTADOS.FINALIZADO
            };
        }
        case 'EDUCACAO_SERVICO': {
            // Ap√≥s escolher servi√ßo, perguntar escola desejada
            return {
                resposta: 'Para qual escola deseja atendimento? (Informe o nome ou escolha uma op√ß√£o)',
                opcoes: [
                    { id: 'escola_central', nome: 'Escola Central', emoji: 'üè´' },
                    { id: 'escola_bairro', nome: 'Escola do Bairro', emoji: 'üè´' },
                    { id: 'escola_rural', nome: 'Escola Rural', emoji: 'üè´' }
                ],
                proximoEstado: 'EDUCACAO_ESCOLA'
            };
        }
        case 'EDUCACAO_ESCOLA': {
            // Perguntar s√©rie/ano
            return {
                resposta: 'Qual a s√©rie/ano do aluno?',
                proximoEstado: 'EDUCACAO_SERIE'
            };
        }
        case 'EDUCACAO_SERIE': {
            // Pedir nome do aluno/respons√°vel
            return {
                resposta: 'Por favor, informe o nome completo do aluno ou respons√°vel:',
                proximoEstado: 'EDUCACAO_DADOS'
            };
        }
        case 'EDUCACAO_DADOS': {
            // Pedir e-mail para envio do protocolo
            return {
                resposta: 'Para finalizar, informe seu e-mail para receber o protocolo:',
                proximoEstado: 'EDUCACAO_EMAIL'
            };
        }
        case 'EDUCACAO_EMAIL': {
            // Finalizar atendimento educa√ß√£o
            return {
                resposta: 'Atendimento de educa√ß√£o registrado! Em breve entraremos em contato por e-mail. ‚úÖ',
                proximoEstado: ESTADOS.FINALIZADO
            };
        }
        case ESTADOS.AGUARDANDO_SERVICO: {
            // Ap√≥s escolher o servi√ßo, pedir descri√ß√£o detalhada
            return {
                resposta: 'Por favor, descreva sua solicita√ß√£o ou d√∫vida com o m√°ximo de detalhes:',
                proximoEstado: 'OUTRAS_DESCRICAO'
            };
        }
        case 'OUTRAS_DESCRICAO': {
            // Perguntar se deseja anexar documento
            return {
                resposta: 'Deseja anexar algum documento ou foto para complementar sua solicita√ß√£o? (Envie agora ou digite "n√£o")',
                proximoEstado: 'OUTRAS_ANEXO'
            };
        }
        case 'OUTRAS_ANEXO': {
            // Pedir e-mail para envio do protocolo
            return {
                resposta: 'Para finalizar, informe seu e-mail para receber o protocolo:',
                proximoEstado: 'OUTRAS_EMAIL'
            };
        }
        case 'OUTRAS_EMAIL': {
            // Finalizar atendimento das demais secretarias
            return {
                resposta: 'Atendimento registrado! Em breve entraremos em contato por e-mail. ‚úÖ',
                proximoEstado: ESTADOS.FINALIZADO
            };
        }
        default:
            return {
                resposta: 'Atendimento finalizado ou em estado desconhecido.',
                proximoEstado: ESTADOS.FINALIZADO
            };
    }
}

export default {
    ESTADOS,
    proximoPasso
};
