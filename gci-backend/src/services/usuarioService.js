// gci-backend/src/services/usuarioService.js
import bcrypt from 'bcryptjs';
import usuarioRepository from '../repositories/usuarioRepository.js';
import { validateHierarchy } from '../middlewares/hierarchyMiddleware.js';
import AppError from '../utils/AppError.js';
import logger from '../utils/logger.js';

const SALT_ROUNDS = 10;

const usuarioService = {
    async findAll(usuarioLogado, filtros = {}) {
        // CORRE칂츾O CR칈TICA: Controle rigoroso de hierarquia
        logger.info(`[SECURITY] Buscando usu치rios - Usu치rio: ${usuarioLogado.email} (${usuarioLogado.role})`);


        if (usuarioLogado.role !== 'admin_sistema') {
            // Verificar se usu치rio tem munic칤pio v치lido
            if (!usuarioLogado.municipio_id) {
                logger.error(`[SECURITY] Usu치rio ${usuarioLogado.email} sem munic칤pio v치lido tentou listar usu치rios`);
                throw new AppError('Usu치rio deve estar associado a um munic칤pio v치lido.', 403);
            }

            // ISOLAMENTO ABSOLUTO: For칞ar filtro por munic칤pio
            filtros.forceMunicipioId = usuarioLogado.municipio_id;

            // Excluir admin_sistema da listagem para outros roles
            filtros.excludeRoles = ['admin_sistema'];

            // Admin munic칤pio n칚o pode ver outros admin_municipio
            if (usuarioLogado.role === 'admin_municipio') {
                filtros.excludeOtherAdminMunicipio = true;
                filtros.currentUserId = usuarioLogado.id;
            }
        }

        logger.info(`[SECURITY] Filtros aplicados: ${JSON.stringify(filtros)}`);
        return await usuarioRepository.findAll(filtros);
    }, async findById(id, usuarioLogado) {
        const usuario = await usuarioRepository.findById(id);
        if (!usuario) {
            throw new AppError('Usu치rio n칚o encontrado.', 404);
        }

        // CORRE칂츾O CR칈TICA: Valida칞칚o rigorosa de hierarquia
        if (usuarioLogado.role !== 'admin_sistema') {
            // CR칈TICO: Admin munic칤pio NUNCA pode ver admin_sistema
            if (usuario.role === 'admin_sistema') {
                logger.warn(`游뚿 TENTATIVA DE BYPASS: ${usuarioLogado.email} (${usuarioLogado.role}) tentou acessar admin_sistema ${usuario.email}`);
                throw new AppError('Acesso negado. Voc칡 n칚o tem permiss칚o para visualizar este usu치rio.', 403);
            }

            // Verificar se usu치rio logado tem munic칤pio v치lido
            if (!usuarioLogado.municipio_id) {
                throw new AppError('Usu치rio deve estar associado a um munic칤pio v치lido.', 403);
            }

            // Verificar se o usu치rio alvo pertence ao mesmo munic칤pio
            if (!usuario.municipio_id || usuario.municipio_id !== usuarioLogado.municipio_id) {
                logger.warn(`游뚿 TENTATIVA DE ACESSO CROSS-MUNIC칈PIO: ${usuarioLogado.email} tentou acessar usu치rio de outro munic칤pio`);
                throw new AppError('Acesso negado para visualizar este usu치rio.', 403);
            }
        }

        delete usuario.senha_hash;
        return usuario;
    },

    async create(dadosUsuario, usuarioLogado) {
        // CORRE칂츾O CR칈TICA: Validar hierarquia antes de criar
        if (!validateHierarchy.canManageRole(usuarioLogado.role, dadosUsuario.role)) {
            throw new AppError(`Acesso negado. Sua role (${usuarioLogado.role}) n칚o pode criar usu치rios com role (${dadosUsuario.role}).`, 403);
        }

        // Regra: Apenas admin_sistema pode criar usu치rios em qualquer munic칤pio.
        // Admin_municipio s칩 pode criar usu치rios para seu pr칩prio munic칤pio.
        if (usuarioLogado.role !== 'admin_sistema') {
            dadosUsuario.municipio_id = usuarioLogado.municipio_id;
        } else if (!dadosUsuario.municipio_id) {
            throw new AppError('Para criar um usu치rio como admin do sistema, o munic칤pio 칠 obrigat칩rio.', 400);
        }

        const usuarioExistente = await usuarioRepository.findByEmail(dadosUsuario.email);
        if (usuarioExistente) {
            throw new AppError('O e-mail fornecido j치 est치 em uso.', 409);
        }

        const senha_hash = await bcrypt.hash(dadosUsuario.senha, SALT_ROUNDS);
        const novoUsuario = await usuarioRepository.create({ ...dadosUsuario, senha_hash });
        logger.info(`Usu치rio criado: ${novoUsuario.email} por ${usuarioLogado.email}`);
        return novoUsuario;
    },

    async update(id, dadosUpdate, usuarioLogado) {
        // CORRE칂츾O CR칈TICA: Validar hierarquia antes de qualquer opera칞칚o
        const usuarioAlvo = await usuarioRepository.findById(id);
        if (!usuarioAlvo) {
            throw new AppError('Usu치rio n칚o encontrado.', 404);
        }

        // CR칈TICO: Admin munic칤pio NUNCA pode editar admin_sistema
        if (usuarioLogado.role !== 'admin_sistema' && usuarioAlvo.role === 'admin_sistema') {
            throw new AppError('Acesso negado. Voc칡 n칚o tem permiss칚o para editar este usu치rio.', 403);
        }

        await this.findById(id, usuarioLogado); // Garante permiss칚o de acesso

        if (dadosUpdate.senha) {
            dadosUpdate.senha_hash = await bcrypt.hash(dadosUpdate.senha, SALT_ROUNDS);
            delete dadosUpdate.senha;
        }

        if (usuarioLogado.role !== 'admin_sistema') {
            delete dadosUpdate.municipio_id;
            delete dadosUpdate.role; // Impedir que admin de munic칤pio altere roles
        }

        return await usuarioRepository.update(id, dadosUpdate);
    },

    async remove(id, usuarioLogado) {
        if (id === usuarioLogado.id) {
            throw new AppError('Voc칡 n칚o pode remover seu pr칩prio usu치rio.', 400);
        }

        // CORRE칂츾O CR칈TICA: Validar hierarquia antes de deletar
        const usuarioAlvo = await usuarioRepository.findById(id);
        if (!usuarioAlvo) {
            throw new AppError('Usu치rio n칚o encontrado.', 404);
        }

        // CR칈TICO: Admin munic칤pio NUNCA pode deletar admin_sistema
        if (usuarioLogado.role !== 'admin_sistema' && usuarioAlvo.role === 'admin_sistema') {
            logger.error(`游뚿 TENTATIVA CR칈TICA DE BYPASS: ${usuarioLogado.email} (${usuarioLogado.role}) tentou DELETAR admin_sistema ${usuarioAlvo.email}`);
            throw new AppError('Acesso negado. Voc칡 n칚o tem permiss칚o para remover este usu치rio.', 403);
        }

        // CR칈TICO: Admin munic칤pio n칚o pode deletar outros admin_municipio
        if (usuarioLogado.role === 'admin_municipio' && usuarioAlvo.role === 'admin_municipio' && usuarioAlvo.id !== usuarioLogado.id) {
            logger.warn(`游뚿 TENTATIVA DE BYPASS: ${usuarioLogado.email} tentou deletar outro admin_municipio ${usuarioAlvo.email}`);
            throw new AppError('Acesso negado. Voc칡 n칚o pode remover outros administradores municipais.', 403);
        }

        await this.findById(id, usuarioLogado);
        await usuarioRepository.remove(id);
        logger.info(`Usu치rio ID ${id} removido por ${usuarioLogado.email}.`);
        return { message: 'Usu치rio removido com sucesso.' };
    }
};

export default usuarioService;