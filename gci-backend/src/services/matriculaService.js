// gci-backend/src/services/matriculaService.js
import matriculaRepository from '../repositories/matriculaRepository.js';
import AppError from '../utils/AppError.js';
import logger from '../utils/logger.js';

const matriculaService = {
    /**
     * Cria uma nova solicita√ß√£o de matr√≠cula.
     */
    async create(dadosMatricula, user) {
        const { nome_aluno } = dadosMatricula;
        try {
            // CORRE√á√ÉO CR√çTICA: Valida√ß√£o de munic√≠pio
            if (user.role !== 'admin_sistema') {
                if (!user.municipio_id) {
                    throw new AppError('Usu√°rio deve estar associado a um munic√≠pio v√°lido.', 403);
                }
                // For√ßar munic√≠pio do usu√°rio
                dadosMatricula.municipio_id = user.municipio_id;
            } else if (!dadosMatricula.municipio_id) {
                throw new AppError('Para criar matr√≠cula como admin do sistema, o munic√≠pio √© obrigat√≥rio.', 400);
            }

            const novaSolicitacao = await matriculaRepository.create(dadosMatricula);
            logger.info(`[EDUCA√á√ÉO] Solicita√ß√£o de matr√≠cula criada para "${nome_aluno}" por ${user.email} no munic√≠pio ${novaSolicitacao.municipio_id}`);
            return novaSolicitacao;
        } catch (err) {
            logger.error(`Erro ao criar solicita√ß√£o de matr√≠cula`, { error: err.message });
            if (err.code === '23503') {
                throw new AppError('Escola ou cidad√£o inv√°lido.', 400);
            }
            throw new AppError('Erro ao criar solicita√ß√£o de matr√≠cula.', 500);
        }
    },

    /**
     * Busca todas as solicita√ß√µes de matr√≠cula com filtros por munic√≠pio.
     */
    async findAll(filtros, user) {
        // CORRE√á√ÉO CR√çTICA: Aplicar filtro de munic√≠pio baseado na role
        if (user.role !== 'admin_sistema') {
            if (!user.municipio_id) {
                throw new AppError('Usu√°rio deve estar associado a um munic√≠pio v√°lido.', 403);
            }
            filtros.municipioId = user.municipio_id;
        }

        logger.info(`[EDUCA√á√ÉO] Listando matr√≠culas com filtros: ${JSON.stringify(filtros)} por ${user.email}`);
        const resultado = await matriculaRepository.findAll(filtros);
        return {
            solicitacoes: resultado.data,
            total: resultado.total,
            pages: resultado.pages,
            currentPage: resultado.currentPage
        };
    },

    /**
     * Busca uma √∫nica solicita√ß√£o por ID com valida√ß√£o de munic√≠pio.
     */
    async findById(id, user) {
        const solicitacao = await matriculaRepository.findById(id);
        if (!solicitacao) {
            throw new AppError('Solicita√ß√£o de matr√≠cula n√£o encontrada.', 404);
        }

        // CORRE√á√ÉO CR√çTICA: Validar acesso por munic√≠pio
        if (user.role !== 'admin_sistema') {
            if (!user.municipio_id) {
                throw new AppError('Usu√°rio deve estar associado a um munic√≠pio v√°lido.', 403);
            }

            if (solicitacao.municipio_id !== user.municipio_id) {
                logger.warn(`üö® TENTATIVA DE ACESSO CROSS-MUNIC√çPIO: ${user.email} tentou acessar matr√≠cula de outro munic√≠pio`);
                throw new AppError('Acesso negado para visualizar esta solicita√ß√£o.', 403);
            }
        }


        return solicitacao;
    },

    /**
     * Atualiza o status de uma solicita√ß√£o de matr√≠cula.
     * @param {number} id - O ID da solicita√ß√£o.
     * @param {string} status - O novo status (ex: 'aprovada', 'reprovada').
     * @param {string} [observacoes] - Observa√ß√µes opcionais da secretaria.
     * @param {object} usuario - O usu√°rio que est√° realizando a a√ß√£o.
     * @returns {Promise<object>} A solicita√ß√£o atualizada.
     */

    async updateStatus(id, status, observacoes, usuario) {
        // Valida√ß√£o de seguran√ßa: buscar a solicita√ß√£o para garantir que o usu√°rio tem permiss√£o
        const solicitacaoExistente = await this.findById(id, usuario);

        if (usuario.role !== 'admin_sistema' && solicitacaoExistente.municipio_id !== usuario.municipio_id) {
            throw new AppError('Voc√™ n√£o tem permiss√£o para alterar esta solicita√ß√£o.', 403);
        }

        // TODO: Notificar o cidad√£o sobre a mudan√ßa de status (via WhatsApp, etc.)

        logger.info(`Status da solicita√ß√£o de matr√≠cula ID ${id} alterado para "${status}" pelo usu√°rio ID ${usuario.id}.`);
        return await matriculaRepository.update(id, { status_solicitacao: status, observacoes_secretaria: observacoes });
    },

    /**
     * Atualiza uma solicita√ß√£o de matr√≠cula.
     * @param {number} id - O ID da solicita√ß√£o.
     * @param {object} dados - Os dados para atualizar.
     * @param {object} usuario - O usu√°rio que est√° realizando a a√ß√£o.
     * @returns {Promise<object>} A solicita√ß√£o atualizada.
     */
    async update(id, dados, usuario) {
        // Valida√ß√£o de seguran√ßa: buscar a solicita√ß√£o para garantir que o usu√°rio tem permiss√£o
        const solicitacaoExistente = await this.findById(id, usuario);

        if (usuario.role !== 'admin_sistema' && solicitacaoExistente.municipio_id !== usuario.municipio_id) {
            throw new AppError('Voc√™ n√£o tem permiss√£o para alterar esta solicita√ß√£o.', 403);
        }

        logger.info(`Solicita√ß√£o de matr√≠cula ID ${id} atualizada pelo usu√°rio ID ${usuario.id}.`);
        return await matriculaRepository.update(id, dados);
    }
};

export default matriculaService;